import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.rmtheis'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }
    }

    // Call external ndk-build(.cmd) script to build the native code
    task ndkBuild(type: Exec) {
//        android.system.
     //   def ndkBuildExt = Os.isFamily(Os.FAMILY_WINDOWS) ? ".cmd" : ""
        commandLine getNdkBuildCmd(), '-C', file('jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors()
//        commandLine "C:\\Work\\Software\\adt-bundle-windows-x86_64\\adt-bundle-windows-x86_64\\adt-bundle-windows-x86_64\\ndk\\ndk-build${ndkBuildExt}", '-C', file('jni').absolutePath,
//				'-j', Runtime.runtime.availableProcessors()

    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    // Cleanup task to remove previously generated binaries
    task ndkClean(type: Exec) {
    //    def ndkBuildExt = Os.isFamily(Os.FAMILY_WINDOWS) ? ".cmd" : ""
//        commandLine "C:\\Work\\Software\\adt-bundle-windows-x86_64\\adt-bundle-windows-x86_64\\adt-bundle-windows-x86_64\\ndk\\ndk-build${ndkBuildExt}", '-C', file('.').absolutePath, 'clean'
        commandLine getNdkBuildCmd(), '-C', file('.').absolutePath, 'clean'


    }

    tasks.withType(Delete) {
        cleanTask -> cleanTask.dependsOn ndkClean
    } 
}
def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir()+"/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild+= ".cmd"

    return ndkbuild
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
